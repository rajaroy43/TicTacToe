{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","web3","getWeb3","a","window","ethereum","Web3","enable","console","log","provider","providers","WebsocketProvider","App","tableref","React","createRef","state","accounts","contractInstance","gameAddress","opponentAddress","gameMessage","oponentWaiting","showBoard","gameCreated","yourTurn","opponentTurn","arrayEventsNextPlayerFired","arrayEventsNextPlayerJoinedFired","arrayEventPlayMoveFired","componentDidMount","eth","getAccounts","setState","account","alert","createGame","Contract","tictactoe_artifacts","abi","deploy","data","bytecode","send","from","value","utils","toWei","gas","instance","options","address","listenToEvents","events","nextPlayerJoined","error","event","indexOf","blockNumber","push","returnValues","joinGame","contractAddress","prompt","methods","on","player1","call","nextPlayer","eror","getBoard","board","i","j","current","children","onclick","playYourMove","bind","x","y","printBoard","length","innerHTML","changeAccount","gameOver","eventObject","confirm","location","reload","playedMove","gameOverWithWin","gameOverWithDraw","this","className","hidden","ref","onClick","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f6c8308a.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 339;","import Web3 from \"web3\";\r\nlet web3;\r\nconst getWeb3 = async () => {\r\n  if (window.ethereum) {\r\n    web3 = new Web3(window.ethereum);\r\n    try {\r\n      await window.ethereum.enable();\r\n    } catch (error) {\r\n      console.log(\"Ethereum console not open yet\");\r\n    }\r\n  } else if (window.web3) {\r\n    web3 = window.web3;\r\n    console.log(\"Injected web3 detected.\");\r\n  } else {\r\n   \r\n    //This is for when you are in development mode but when you are in production mode use Tuffle-Hd-WalletProvider \r\n    //If user not installed metamask in his browser\r\n    // const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:9545\");\r\n    const provider = new Web3.providers.WebsocketProvider('ws://localhost:8545')\r\n    web3 = new Web3(provider);\r\n    console.log(\"No web3 instance injected, using Local web3.\");\r\n    // const provider = new Web3.providers.HttpProvider(\r\n    //   \"https://rinkeby.infura.io/v3/45662a3729fa43678d13b210e60dee48\"\r\n    // );\r\n    // web3 = new Web3(provider);\r\n    // console.log(\"No web3 instance injected, using infura web3.\");\r\n  }\r\n  return web3\r\n};\r\n\r\nexport default getWeb3;\r\n","//Here creating only game and assume there is no emergency fundback and also player play move under 3 minutes\nimport React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport tictactoe_artifacts from \"./build/contracts/TicTacToe.json\";\nclass App extends Component {\n  tableref = React.createRef();\n  state = {\n    web3: null,\n    accounts: \"0x0\",\n    contractInstance: null,\n    gameAddress: \"0x0\",\n    opponentAddress: \"0x0\",\n    gameMessage: \"\",\n    oponentWaiting: false,\n    showBoard: false,\n    gameCreated: false,\n    yourTurn: false,\n    opponentTurn: false,\n  };\n  arrayEventsNextPlayerFired = [];\n  arrayEventsNextPlayerJoinedFired = [];\n  arrayEventPlayMoveFired=[];\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      this.setState({ web3, account: accounts[0] });\n      console.log(\"First account \" + accounts[0]);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n    }\n  };\n  createGame = async () => {\n    const { web3, account } = this.state;\n    try {\n      const instance = await new web3.eth.Contract(tictactoe_artifacts.abi)\n        .deploy({ data: tictactoe_artifacts.bytecode })\n        .send({\n          from: account,\n          value: web3.utils.toWei(\"0.1\", \"ether\"),\n          gas: 3000000,\n        });\n\n      this.setState({\n        contractInstance: instance,\n        gameAddress: instance.options.address,\n        oponentWaiting: true,\n        gameCreated: true,\n      });\n      //Watching Events\n      this.listenToEvents();\n      //watching event when player join the game\n      await instance.events.nextPlayerJoined((error, event) => {\n        if (!error) {\n          if (this.arrayEventsNextPlayerJoinedFired.indexOf(event.blockNumber) == -1) {\n            this.arrayEventsNextPlayerJoinedFired.push(event.blockNumber);\n            this.setState({\n              opponentAddress: event.returnValues[\"player\"],\n              oponentWaiting: false,\n              showBoard: true,\n            });\n            console.log(\"Given Below nextPlayerJoined event fired\");\n            console.log(event);\n          } \n        }\n        }\n      );\n      console.log(\"You successfully created this game\");\n    } catch (error) {\n      alert(\"Please confirm transaction\");\n    }\n  };\n  joinGame = async () => {\n    const { web3, account } = this.state;\n    const contractAddress = window.prompt(\"Address of game\");\n    if (contractAddress == \"\") {\n      alert(\"Game Address can't be null\");\n      return;\n    }\n    try {\n      const instance = await new web3.eth.Contract(\n        tictactoe_artifacts.abi,\n        contractAddress\n      );\n      this.setState({ contractInstance: instance });\n\n      //Watching Events\n      this.listenToEvents();\n      await instance.methods\n        .joinGame()\n        .send({ from: account, value: web3.utils.toWei(\"0.1\", \"ether\") })\n        // .on(\"transactionHash\", function (hash) {\n        //   console.log(hash);\n        // })\n        // .on(\"confirmation\", function (confirmationNumber, receipt) {\n        //   console.log(confirmationNumber);\n        // })\n        .on(\"error\", () => console.error);\n      const player1 = await instance.methods.player1().call();\n      // console.log(gameJoin.events.nextPlayer.returnValues);\n      this.setState({\n        opponentAddress: player1,\n        showBoard: true,\n        gameAddress: instance.options.address,\n        gameCreated: true,\n      });\n    } catch (error) {\n      alert(\"Please give Valid address to join the game\");\n      return;\n    }\n  };\n  nextPlayer = async (eror, event) => {\n    //Only 1 time evet fired for a specific block not for 4 time because metamask 4 time kr dega fire event(because hum 4 event ko watch kr rhe h)\n    const { account, contractInstance } = this.state;\n    if (this.arrayEventsNextPlayerFired.indexOf(event.blockNumber) == -1) {\n      console.log(\"Given Below next Player event fired\");\n      console.log(event);\n\n      this.arrayEventsNextPlayerFired.push(event.blockNumber);\n      const board = await contractInstance.methods.getBoard().call();\n      if (event.returnValues[\"player\"] == account) {\n        //our Turn\n        this.setState({ yourTurn: true, opponentTurn: false });\n        for (var i = 0; i < 3; i++) {\n          for (var j = 0; j < 3; j++) {\n            if (board[i][j] == 0) {\n              // this.tableref.current.children[0].children[i].children[j].addEventListener(\"click\",\n              //   this.playYourMove.bind(this, { x: i, y: j })\n              // );\n              this.tableref.current.children[0].children[i].children[\n                j\n              ].onclick = this.playYourMove.bind(this, { x: i, y: j });\n            }\n          }\n        }\n      } else {\n        //Opponent Turn\n        this.setState({ opponentTurn: true, yourTurn: false });\n      }\n    }\n  };\n  playYourMove = async (e) => {\n    //After clicking on board we have to remove eventListener from board so\n    //that he cannot click more than 1 times\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        this.tableref.current.children[0].children[i].children[\n          j\n        ].onclick = null;\n      }\n    }\n    const { account, contractInstance } = this.state;\n    const board = await contractInstance.methods.getBoard().call();\n    try {\n      await contractInstance.methods\n        .playYourMove(e.x, e.y)\n        .send({ from: account, gas: 3000000 });\n    } catch (error) {\n      //if he reject the transaction when playing move then onclick handler again restart\n      for (i = 0; i < 3; i++) {\n        for (j = 0; j < 3; j++) {\n          if (board[i][j] == 0) {\n            // this.tableref.current.children[0].children[i].children[j].addEventListener(\"click\",\n            //   this.playYourMove.bind(this, { x: i, y: j })\n            // );\n            this.tableref.current.children[0].children[i].children[\n              j\n            ].onclick = this.playYourMove.bind(this, { x: i, y: j });\n          }\n        }\n      }\n      alert(\"Play your move again\");\n    }\n\n  };\n  printBoard = async (error,event) => {\n    if(this.arrayEventPlayMoveFired.indexOf(event.blockNumber)==-1){\n    this.arrayEventPlayMoveFired.push(event.blockNumber);\n    console.log(\" Given Below playMove Event fired\");\n    console.log(event);\n    const { contractInstance, account } = this.state;\n    const board = await contractInstance.methods.getBoard().call();\n    for (var i = 0; i < board.length; i++) {\n      for (var j = 0; j < board[i].length; j++) {\n        if (board[i][j] === account) {\n          this.tableref.current.children[0].children[i].children[j].innerHTML =\n            \"<h1>X</h1>\";\n        } else if (board[i][j] != 0) {\n          this.tableref.current.children[0].children[i].children[j].innerHTML =\n            \"<h1>O</h1>\";\n        }\n      }\n    }\n  }\n  };\n  changeAccount = async () => {\n    const { web3 } = this.state;\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts);\n    this.setState({ account: accounts[1] });\n    console.log(\"Second account \" + accounts[1]);\n  };\n  gameOver = async (eror, eventObject) => {\n    const { account, gameMessage } = this.state;\n    if (!!gameMessage) {\n      return;\n    }\n    if (eventObject.event == \"gameOverWithWin\") {\n      console.log(\"Given Below gameOverWithWin event fired\");\n      if (eventObject.returnValues[\"winnerPlayer\"] == account) {\n        alert(\"Congrats you won!\");\n        this.setState({ gameMessage: \"You won this match\", yourTurn: false });\n      } else {\n        alert(\"Oops You lost ! Try Again....\");\n        this.setState({\n          gameMessage: \"You loose this match\",\n          opponentTurn: false,\n        });\n      }\n    } else {\n      alert(\"That a nice draw | Try Again\");\n      console.log(\"Given Below gameOverWithDrawevent fired\"); \n      this.setState({ gameMessage: \"What a nice draw....\" });\n    }\n    console.log(eventObject);\n    if (window.confirm(\"Want to erase yout TicTacToe Board\")) {\n      window.location.reload();\n    }\n  };\n  listenToEvents = async () => {\n    const { contractInstance } = this.state;\n    const instance = contractInstance;\n    //watiching play event fired and update board\n    await instance.events.playedMove(this.printBoard);\n    //watching nextplayer event fired\n    await instance.events.nextPlayer(this.nextPlayer);\n    //watching gameOverWithWin event fired\n    await instance.events.gameOverWithWin(this.gameOver);\n    //watching gameOverWithWin event fired\n    await instance.events.gameOverWithDraw(this.gameOver);\n  };\n  // gameValidTme=()=>{\n  //   setInterval((e) => {console.log(e)}, 1000)\n  // }\n  render() {\n    const {\n      web3,\n      opponentAddress,\n      gameAddress,\n      oponentWaiting,\n      showBoard,\n      gameCreated,\n      yourTurn,\n      opponentTurn,\n      gameMessage,\n    } = this.state;\n    if (!web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <div className=\"container text-center\">\n        <div className=\"row\">\n          <div className=\"col-lg\">\n            <h1>TicTacToe</h1>\n            <h3>Distributed TicTacToe on the Blockchain</h3>\n            <div hidden={!oponentWaiting}>Waiting for opponent to join ...</div>\n            {yourTurn ? \"Your turn\" : null}\n            {opponentTurn ? \"opponent turn\" : null}\n            {!!gameMessage ? gameMessage : null}\n            <table id=\"board\" ref={this.tableref} hidden={!showBoard}>\n              <tbody>\n                <tr>\n                  <td></td>\n                  <td></td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td></td>\n                  <td></td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td></td>\n                  <td></td>\n                </tr>\n              </tbody>\n            </table>\n            <br />\n            <p hidden={!gameCreated}>Game Addres:{gameAddress}</p>\n            <p hidden={!showBoard}>Opponent Addres:{opponentAddress}</p>\n            <div className=\"game-created\" hidden={gameCreated}>\n              <button\n                id=\"createGame\"\n                onClick={this.createGame}\n                className=\"btn btn-primary\"\n              >\n                Create game\n              </button>\n              --OR--\n              <button\n                id=\"joinGame\"\n                onClick={this.joinGame}\n                className=\"btn btn-primary\"\n              >\n                Join game\n              </button>\n              <p>Game Cost: 0.1 ether</p>\n              <hr />\n              <button onClick={this.changeAccount} className=\"btn btn-success\">\n                #UseAccount2\n              </button>\n              <br />\n              <strong>Hint:</strong>use this button in developing mode! For\n              changing account please change account in metamask\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}